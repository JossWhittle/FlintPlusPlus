[Error  ] Blacklist.cpp:21: 'strtok' is not thread safe. Consider 'strtok_r'.
[Advice ] Blacklist.cpp:23: Prefer `nullptr' to `NULL' in new C++ code.
[Warning] Blacklist.cpp:8: 'volatile' is not thread-safe.
[Error  ] Constructor.cpp:24: Single - argument constructor 'Foo(int i)' may inadvertently be used as a type conversion constructor.
[Error  ] Constructor.cpp:29: Move constructors should not take a const argument: Foo(const Foo&& other)
[Error  ] Constructor.cpp:30: Copy constructors should take a const argument: Foo(Foo &other)
[Error  ] Constructor.cpp:21: Single - argument constructor 'FooU(char i)' may inadvertently be used as a type conversion constructor.
[Warning] Constructor.cpp:9: Protected inheritance is sometimes not a good idea.
[Warning] Constructor.cpp:12: Throw specifications on functions are deprecated.
[Warning] Constructor.cpp:18: Throw specifications on functions are deprecated.
[Warning] Constructor.cpp:5: Throw specifications on functions are deprecated.
[Error  ] Define.hpp:12: Include guard doesn't cover the entire file.
[Warning] Define.hpp:5: Symbol __BAD_DEFINE invalid.
[Warning] Destructors.cpp:1: Classes with virtual functions should not have a public non-virtual destructor.
[Warning] Destructors.cpp:10: Classes with virtual functions should not have a public non-virtual destructor.
[Warning] Exceptions.cpp:6: std::exception should be inherited publically (C++ std: 11.2)
[Warning] Exceptions.cpp:7: std::exception should be inherited publically (C++ std: 11.2)
[Warning] Exceptions.cpp:8: std::exception should be inherited publically (C++ std: 11.2)
[Warning] Exceptions.cpp:12: std::exception should be inherited publically (C++ std: 11.2)
[Warning] Exceptions.cpp:13: std::exception should be inherited publically (C++ std: 11.2)
[Error  ] Ifdef.cpp:15: Unmatched #if/#endif.
[Error  ] ImplicitConversion.cpp:15: operator bool() is dangerous.
[Error  ] Includes.cpp:15: The associated header file of .cpp files should be included before any other includes.
[Error  ] Includes.cpp:4: An -inl file (Wrong-inl.h) was included even though this is not its associated header.
[Warning] Includes.cpp:6: Including deprecated header 'common/base/Base.h'
[Error  ] Memset.cpp:11: Did you mean memset(ptr, 0, 4) ?
[Error  ] Memset.cpp:13: Did you mean memset(ptr, 1, sizeof(int)) ?
[Warning] Namespace.hpp:6: Avoid the use of using namespace directives at global/namespace scope in headers
[Warning] Namespace.hpp:9: Don't use static at global or namespace scopes in headers.
[Warning] Namespace.hpp:10: Don't use static at global or namespace scopes in headers.
[Warning] Namespace.hpp:19: Don't use static at global or namespace scopes in headers.
[Warning] Namespace.hpp:20: Don't use static at global or namespace scopes in headers.
[Warning] Namespace.hpp:23: Don't use static at global or namespace scopes in headers.
[Warning] Namespace.hpp:25: Don't use static at global or namespace scopes in headers.
[Warning] Namespace.hpp:27: Conflicting namespaces: boost and std
[Warning] Namespace.hpp:29: Conflicting namespaces: ::std and std
[Warning] Namespace.hpp:32: Conflicting namespaces: ::boost and std
[Error  ] Pointers.cpp:39: Mutex holder variable declared without a name, causing the lock to be released immediately.
[Error  ] Pointers.cpp:40: Mutex holder variable declared without a name, causing the lock to be released immediately.
[Error  ] Pointers.cpp:27: unique_ptr<T[]> should be used with an array type.
[Error  ] Pointers.cpp:28: unique_ptr<T> should be unique_ptr<T[]> when used with an array.
[Error  ] Pointers.cpp:31: unique_ptr<T[]> should be used with an array type.
[Error  ] Pointers.cpp:32: unique_ptr<T> should be unique_ptr<T[]> when used with an array.
[Warning] Pointers.cpp:34: Consider using 'allocate_shared' which performs better with fewer allocations.
[Warning] Pointers.cpp:35: Consider using 'make_shared' which performs better with fewer allocations.
[Warning] Pointers.cpp:36: Consider using 'make_shared' which performs better with fewer allocations.
[Warning] Pointers.cpp:37: Consider using 'allocate_shared' which performs better with fewer allocations.
[Warning] Throw.cpp:14: Symbol 'int' invalid in catch clause. You may only catch user-defined types.
[Error  ] Throw.cpp:15: Symbol 'i' of type ' Foo i' caught by value. Use catch by (preferably const) reference throughout.
[Error  ] Throw.cpp:21: Symbol 'Bar' of type ' Bar' caught by value. Use catch by (preferably const) reference throughout.
[Error  ] Throw.cpp:8: Heap-allocated exception: throw new MyException(); This is usually a mistake in c++.
[Error  ] Throw.cpp:10: Heap-allocated exception: throw new (MyException)(); This is usually a mistake in c++.
[Error  ] Throw.cpp:12: Heap-allocated exception: throw new MyException(); This is usually a mistake in c++.

Lint Summary: 14 files
Errors: 23 Warnings: 29 Advice: 1

Estimated Lines of Code: 306
